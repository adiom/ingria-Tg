// INGRIA TELEGRAM NODEJS + –õ–û–ì–ò –ù–ê –ü–û–†–¢–£ 3000
require('dotenv').config();
const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const FormData = require('form-data');

const app = express();
const PORT = 3000;

const TELEGRAM_BOT_TOKEN = process.env.BOT_TOKEN;
const BACKEND_API_URL = process.env.BACKEND_API_URL || 'https://ingria-backend.vercel.app/analyze';

if (!TELEGRAM_BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞.');
    process.exit(1);
}

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });
let logs = [];

function logMessage(message) {
    const timestamp = new Date().toISOString();
    const logEntry = `[${timestamp}] ${message}`;
    logs.push(logEntry);
    console.log(logEntry);
    if (logs.length > 100) logs.shift();
}

bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ.');
});

bot.onText(/\/help/, (msg) => {
    bot.sendMessage(msg.chat.id, '–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ ‚Äì —è –æ–±—Ä–∞–±–æ—Ç–∞—é!');
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    logMessage(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @${msg.from.username || msg.from.first_name}: ${msg.text || '[–§–∞–π–ª]'} `);
    
    if (msg.photo) {
        try {
            const fileId = msg.photo[msg.photo.length - 1].file_id;
            const fileInfo = await bot.getFile(fileId);
            const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
            
            const imageResponse = await axios.get(fileUrl, { responseType: 'arraybuffer' });
            const formData = new FormData();
            formData.append('file', Buffer.from(imageResponse.data), { filename: 'image.jpg', contentType: 'image/jpeg' });
            
            const backendResponse = await axios.post(BACKEND_API_URL, formData, { headers: formData.getHeaders() });
            bot.sendMessage(chatId, `üì∑ –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${backendResponse.data.description}`);
        } catch (error) {
            logMessage(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: ${error.message}`);
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ.');
        }
    } else if (msg.voice) {
        try {
            const fileId = msg.voice.file_id;
            const fileInfo = await bot.getFile(fileId);
            const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;
            
            const audioResponse = await axios.get(fileUrl, { responseType: 'arraybuffer' });
            const formData = new FormData();
            formData.append('file', Buffer.from(audioResponse.data), { filename: 'audio.ogg', contentType: 'audio/ogg' });
            
            const backendResponse = await axios.post(BACKEND_API_URL, formData, { headers: formData.getHeaders() });
            bot.sendMessage(chatId, `üéôÔ∏è –ê–Ω–∞–ª–∏–∑ –∞—É–¥–∏–æ: ${backendResponse.data.description}`);
        } catch (error) {
            logMessage(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: ${error.message}`);
            bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ.');
        }
    }
});

app.get('/', (req, res) => {
    res.send('<h1>–õ–æ–≥ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞</h1><pre>' + logs.join('\n') + '</pre>');
});

app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: http://localhost:${PORT}`);
});
