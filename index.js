// INGRIA TELEGRAM NODEJS

require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const FormData = require('form-data');
const fs = require('node:fs/promises');
const path = require('node:path');

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ Telegram –±–æ—Ç–∞ –∏ URL –±—ç–∫–µ–Ω–¥–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const TELEGRAM_BOT_TOKEN = process.env.TOKEN;
const BACKEND_API_URL = process.env.BACKEND_API_URL || 'https://ingria-backend.vercel.app/analyze';

if (!TELEGRAM_BOT_TOKEN) {
    console.error('–û—à–∏–±–∫–∞: –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.');
    process.exit(1);
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
const bot = new TelegramBot(TELEGRAM_BOT_TOKEN, { polling: true });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, (msg) => {
    bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –∏—Ö –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help
bot.onText(/\/help/, (msg) => {
    bot.sendMessage(msg.chat.id, '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–∫–∞–∂—É, —á—Ç–æ –Ω–∞ –Ω–∏—Ö –≤–∏–∂—É/—Å–ª—ã—à—É.');
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
function truncateText(text, maxLength) {
    if (text.length > maxLength) {
        return text.substring(0, maxLength - 3) + '...';
    }
    return text;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', msg); // –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ


    const chatId = msg.chat.id;
    const MAX_CAPTION_LENGTH = 1000; // –ü—Ä–∏–º–µ—Ä –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã –ø–æ–¥–ø–∏—Å–∏

    if (msg.photo) {
        try {
            const statusMessage = await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É... ‚è≥');

            const fileId = msg.photo[msg.photo.length - 1].file_id;
            const fileInfo = await bot.getFile(fileId);
            const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;

            const imageResponse = await axios({
                method: 'get',
                url: fileUrl,
                responseType: 'arraybuffer',
            });

            const formData = new FormData();
            const imageName = `telegram_image_${msg.message_id}.jpg`;
            formData.append('file', Buffer.from(imageResponse.data), {
                filename: imageName,
                contentType: 'image/jpeg',
            });

            const backendResponse = await axios.post(BACKEND_API_URL, formData, {
                headers: formData.getHeaders(),
            });

            const truncatedDescription = truncateText(backendResponse.data.description, MAX_CAPTION_LENGTH - ("\n\n@Ingria_AI_bot Ingria AI".length));

            const tempFilePath = path.join(__dirname, imageName);
            await fs.writeFile(tempFilePath, Buffer.from(imageResponse.data));

            await bot.sendPhoto(chatId, tempFilePath, {
                caption: `${truncatedDescription} \n\n@Ingria_AI_bot Ingria AI`,
            });

            await fs.unlink(tempFilePath);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    } else if (msg.voice) {
        try {
            const fileId = msg.voice.file_id;
            const fileInfo = await bot.getFile(fileId);
            const fileUrl = `https://api.telegram.org/file/bot${TELEGRAM_BOT_TOKEN}/${fileInfo.file_path}`;

            const audioResponse = await axios({
                method: 'get',
                url: fileUrl,
                responseType: 'arraybuffer',
            });

            const formData = new FormData();
            const audioName = `telegram_audio_${msg.message_id}.ogg`;
            formData.append('file', Buffer.from(audioResponse.data), {
                filename: audioName,
                contentType: 'audio/ogg',
            });

            const backendResponse = await axios.post(BACKEND_API_URL, formData, {
                headers: formData.getHeaders(),
            });

            const truncatedDescription = truncateText(backendResponse.data.description, MAX_CAPTION_LENGTH - ("\n\nüéà @Ingria_AI_bot Ingria AI".length));

            const tempFilePath = path.join(__dirname, audioName);
            await fs.writeFile(tempFilePath, Buffer.from(audioResponse.data));

            await bot.sendVoice(chatId, tempFilePath, {
                caption: `${truncatedDescription} \n\nüéà @Ingria_AI_bot Ingria AI`,
            });

            await fs.unlink(tempFilePath);

        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ:', error);
            bot.sendMessage(chatId, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }  else if (msg.text) {
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${msg.from.username || msg.from.first_name}: ${msg.text}`);
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    }
});

console.log('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...');